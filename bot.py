import os
import json
import logging
import requests
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove, InputFile
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    CallbackQueryHandler,
    filters,
)
from openai import OpenAI

# --- –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã ---
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
EXCHANGE_API_KEY = os.getenv("EXCHANGE_API_KEY")
OPENWEATHER_API_KEY = os.getenv("OPENWEATHER_API_KEY")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=OPENAI_API_KEY)

DATA_FILE = "data.json"
LOG_FILE = "bot_log.txt"
VOICE_DIR = "voices"

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    filename=LOG_FILE,
    level=logging.INFO,
    format="%(asctime)s - %(message)s",
)

def log(user_id, action, message=""):
    logging.info(f"User {user_id}: {action} {message}")

# --- –†–∞–±–æ—Ç–∞ —Å JSON ---
def load_data():
    if not os.path.exists(DATA_FILE):
        return {}
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏) ---
def main_menu():
    keyboard = [
        [InlineKeyboardButton("üí± –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç", callback_data="convert")],
        [InlineKeyboardButton("üå§ –ü–æ–≥–æ–¥–∞", callback_data="weather")],
        [InlineKeyboardButton("üìù –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="notes")],
    ]
    return InlineKeyboardMarkup(keyboard)

# --- /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    data = load_data()
    data[user_id] = {"menu": "main", "notes": data.get(user_id, {}).get("notes", [])}
    save_data(data)
    log(user_id, "–ó–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç, –ê–ª–µ–∫—Å–∞–Ω–¥—Ä! –¢–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ J.A.R.V.I.S. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )

# --- /help ---
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/convert - –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç\n"
        "/list - –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏\n"
        "/del <–Ω–æ–º–µ—Ä> - –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É\n"
        "/voices - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
        "üëâ –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é."
    )
    await update.message.reply_text(help_text, reply_markup=ReplyKeyboardRemove())

# --- –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç ---
def convert_currency(amount: float, from_currency: str, to_currency: str):
    if not EXCHANGE_API_KEY:
        return None
    url = (
        "http://api.currencylayer.com/convert"
        f"?from={from_currency}&to={to_currency}&amount={amount}&access_key={EXCHANGE_API_KEY}"
    )
    try:
        resp = requests.get(url)
        if resp.status_code != 200:
            return None
        data = resp.json()
        print("Currency API response:", data)
        if data.get("success") and "result" in data:
            rate = data.get("info", {}).get("quote")
            return data["result"], rate
        return None
    except Exception as e:
        print("–û—à–∏–±–∫–∞ API –≤–∞–ª—é—Ç:", e)
        return None

# --- –ü–æ–≥–æ–¥–∞ ---
def get_weather(city_name):
    if not OPENWEATHER_API_KEY:
        return None
    url = (
        f"http://api.openweathermap.org/data/2.5/weather?q={city_name}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
    )
    try:
        resp = requests.get(url)
        data = resp.json()
        if data.get("cod") != 200:
            return None
        weather_desc = data["weather"][0]["description"].capitalize()
        temp = data["main"]["temp"]
        feels_like = data["main"]["feels_like"]
        humidity = data["main"]["humidity"]
        wind_speed = data["wind"]["speed"]
        return f"–ü–æ–≥–æ–¥–∞ –≤ {city_name}:\n{weather_desc}\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\nüíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\nüí® –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å"
    except Exception as e:
        print("–û—à–∏–±–∫–∞ API –ø–æ–≥–æ–¥—ã:", e)
        return None

# --- /convert ---
async def convert_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    data = load_data()
    data[user_id]["menu"] = "convert"
    save_data(data)
    await update.message.reply_text(
        "üí± –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç\n\n"
        "–ù–∞–ø–∏—à–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `<—Å—É–º–º–∞> <–∏–∑ –≤–∞–ª—é—Ç—ã> <–≤ –≤–∞–ª—é—Ç—É>`\n–ü—Ä–∏–º–µ—Ä: `100 USD RUB`\n\n"
        "–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ‚Äî /start",
        reply_markup=ReplyKeyboardRemove()
    )

# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–º–µ—Ç–æ–∫ ---
async def list_notes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    data = load_data()
    notes = data.get(user_id, {}).get("notes", [])
    if notes:
        text = "üìù –¢–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏:\n" + "\n".join([f"{i+1}. {note}" for i, note in enumerate(notes)])
    else:
        text = "üìù –ó–∞–º–µ—Ç–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç."
    await update.message.reply_text(text, reply_markup=ReplyKeyboardRemove())

# --- –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ ---
async def del_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    data = load_data()
    notes = data.get(user_id, {}).get("notes", [])
    if not notes:
        await update.message.reply_text("‚ö†Ô∏è –ó–∞–º–µ—Ç–æ–∫ –Ω–µ—Ç.", reply_markup=ReplyKeyboardRemove())
        return

    try:
        idx = int(context.args[0]) - 1
        if 0 <= idx < len(notes):
            removed = notes.pop(idx)
            save_data(data)
            await update.message.reply_text(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ –∑–∞–º–µ—Ç–∫–∞: {removed}", reply_markup=ReplyKeyboardRemove())
        else:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏.", reply_markup=ReplyKeyboardRemove())
    except:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É: /del <–Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏>", reply_markup=ReplyKeyboardRemove())

# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def list_voices(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_dir = os.path.join(VOICE_DIR, user_id)
    if not os.path.exists(user_dir):
        await update.message.reply_text("‚ö†Ô∏è –ì–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç.", reply_markup=ReplyKeyboardRemove())
        return

    files = sorted(os.listdir(user_dir))
    if not files:
        await update.message.reply_text("‚ö†Ô∏è –ì–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç.", reply_markup=ReplyKeyboardRemove())
        return

    for f in files:
        path = os.path.join(user_dir, f)
        await update.message.reply_voice(voice=InputFile(path))

# --- –ö–æ–º–∞–Ω–¥–∞ /ask ---
async def ask_ai(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /ask <—Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å>")
        return

    question = " ".join(context.args)
    await update.message.reply_text("ü§ñ –î—É–º–∞—é...")

    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –î–∂–∞—Ä–≤–∏—Å, —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–∞–∫ —É –¢–æ–Ω–∏ –°—Ç–∞—Ä–∫–∞."},
                {"role": "user", "content": question},
            ],
        )
        answer = response.choices[0].message.content
        await update.message.reply_text(answer)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ OpenAI:", e)
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò.")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    data = load_data()
    menu_state = data.get(user_id, {}).get("menu", "main")
    text = update.message.text.strip() if update.message.text else ""
    log(user_id, "–ù–∞–ø–∏—Å–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ", text if text else "[non-text]")

    # --- –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ---
    if update.message.voice:
        user_dir = os.path.join(VOICE_DIR, user_id)
        os.makedirs(user_dir, exist_ok=True)

        file_id = update.message.voice.file_id
        new_file = await context.bot.get_file(file_id)
        file_path = os.path.join(user_dir, f"{file_id}.ogg")
        await new_file.download_to_drive(file_path)

        await update.message.reply_text(
            f"‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ({len(os.listdir(user_dir))} –≤—Å–µ–≥–æ).",
            reply_markup=ReplyKeyboardRemove()
        )
        log(user_id, "–°–æ—Ö—Ä–∞–Ω–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", file_path)
        return

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ò–ò (—Ç—Ä–∏–≥–≥–µ—Ä-—Å–ª–æ–≤–æ "–¥–∂–∞—Ä–≤–∏—Å") ---
    if text.lower().startswith("–¥–∂–∞—Ä–≤–∏—Å"):
        question = text[len("–¥–∂–∞—Ä–≤–∏—Å"):].strip()
        await update.message.reply_text("ü§ñ –î–∂–∞—Ä–≤–∏—Å –¥—É–º–∞–µ—Ç...")
        try:
            response = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": "–¢—ã ‚Äî –î–∂–∞—Ä–≤–∏—Å, —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–∞–∫ —É –¢–æ–Ω–∏ –°—Ç–∞—Ä–∫–∞."},
                    {"role": "user", "content": question},
                ],
            )
            answer = response.choices[0].message.content
            await update.message.reply_text(answer)
        except Exception as e:
            print("–û—à–∏–±–∫–∞ OpenAI:", e)
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –î–∂–∞—Ä–≤–∏—Å–∞.")
        return

    # --- –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç ---
    if menu_state == "convert":
        parts = text.split()
        if len(parts) != 3:
            await update.message.reply_text("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: `<—Å—É–º–º–∞> <–∏–∑ –≤–∞–ª—é—Ç—ã> <–≤ –≤–∞–ª—é—Ç—É>`", reply_markup=ReplyKeyboardRemove())
            return
        try:
            amount = float(parts[0])
            from_cur = parts[1].upper()
            to_cur = parts[2].upper()
            conv = convert_currency(amount, from_cur, to_cur)
            if conv:
                result, rate = conv
                await update.message.reply_text(
                    f"üí± {amount} {from_cur} = {result:.2f} {to_cur}\n"
                    f"(–ö—É—Ä—Å: 1 {from_cur} = {rate:.6f} {to_cur})",
                    reply_markup=ReplyKeyboardRemove()
                )
            else:
                await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å –≤–∞–ª—é—Ç—ã –∏–ª–∏ API-–∫–ª—é—á.", reply_markup=ReplyKeyboardRemove())
        except:
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.", reply_markup=ReplyKeyboardRemove())
        return

    # --- –ü–æ–≥–æ–¥–∞ ---
    if menu_state == "weather":
        city = text
        weather_info = get_weather(city)
        if weather_info:
            await update.message.reply_text(weather_info, reply_markup=ReplyKeyboardRemove())
        else:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.", reply_markup=ReplyKeyboardRemove())
        return

    # --- –ó–∞–º–µ—Ç–∫–∏ ---
    if menu_state == "notes":
        if text.startswith("/"):
            return
        data[user_id]["notes"].append(text)
        save_data(data)
        await update.message.reply_text(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {text}", reply_markup=ReplyKeyboardRemove())
        return

    # --- –ê–≤—Ç–æ-–î–∂–∞—Ä–≤–∏—Å: –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ---
    if text:
        question = text
        await update.message.reply_text("ü§ñ –î–∂–∞—Ä–≤–∏—Å –¥—É–º–∞–µ—Ç...")
        try:
            response = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": "–¢—ã ‚Äî –î–∂–∞—Ä–≤–∏—Å, —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–∞–∫ —É –¢–æ–Ω–∏ –°—Ç–∞—Ä–∫–∞."},
                    {"role": "user", "content": question},
                ],
            )
            answer = response.choices[0].message.content
            await update.message.reply_text(answer)
        except Exception as e:
            print("–û—à–∏–±–∫–∞ OpenAI:", e)
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –î–∂–∞—Ä–≤–∏—Å–∞.")

# --- –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é ---
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = str(query.from_user.id)
    data = load_data()

    if query.data == "convert":
        data[user_id]["menu"] = "convert"
        save_data(data)
        await query.edit_message_text("üí± –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç\n\n–ù–∞–ø–∏—à–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `<—Å—É–º–º–∞> <–∏–∑ –≤–∞–ª—é—Ç—ã> <–≤ –≤–∞–ª—é—Ç—É>`")
    elif query.data == "weather":
        data[user_id]["menu"] = "weather"
        save_data(data)
        await query.edit_message_text("üå§ –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É:")
    elif query.data == "notes":
        data[user_id]["menu"] = "notes"
        if "notes" not in data[user_id]:
            data[user_id]["notes"] = []
        save_data(data)
        await query.edit_message_text(
            "üìù –†–µ–∂–∏–º –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.\n"
            "–î–æ–±–∞–≤—å –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É, –Ω–∞–ø–∏—à–∏ /list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–º–µ—Ç–æ–∫ –∏–ª–∏ /del –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."
        )

# --- –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –≥–æ–ª–æ—Å–æ–≤ ---
os.makedirs(VOICE_DIR, exist_ok=True)

# --- –ó–∞–ø—É—Å–∫ ---
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("convert", convert_command))
    app.add_handler(CommandHandler("list", list_notes))
    app.add_handler(CommandHandler("del", del_note))
    app.add_handler(CommandHandler("voices", list_voices))
    app.add_handler(CommandHandler("ask", ask_ai))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    app.add_handler(CallbackQueryHandler(button))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
    app.add_handler(MessageHandler(filters.VOICE, echo))  # –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    app.run_polling()

if __name__ == "__main__":
    main()
